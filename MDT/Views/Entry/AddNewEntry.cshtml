@using MDT.ViewModels
@model EntryVM

@{
    ViewBag.Title = $"Add New Entries to {Model.DrawTitle}";

}

<h2>Add New Entries</h2>
<br />
@if (ViewBag.tooMuch ?? false)
{
<div class="text-danger">
    The user does not have a enough balance to purchase @Model.EntryCount entries!
</div>
}
else if (ViewBag.isNeg ?? false)
{
<div class="text-danger">
    The number of entries cannot be less than or equal to zero!
</div>
}
else if (ViewBag.SuccessMessage != null)
{
<div class="text-success">
    @ViewBag.SuccessMessage
</div>
}
<div id="addNewEntryForm">
    @using (Html.BeginForm("AddNewEntry", "Entry", Model, FormMethod.Post))
    {
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.DrawId)
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.UserId)
            <div class="col-xs-8">
                @Html.DropDownListFor(model => model.UserId, new SelectList(ViewBag.Entries, "val", "txt"), "Select a User", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EntryCount)
            <div class="col-xs-8">
                @Html.EditorFor(model => model.EntryCount, new { htmlAttributes = new { type = "number", Value = Model.EntryCount, @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EntryCount, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-8 pull-right">
                <button type="submit" class="btn btn-sm btn-info" id="btnAddEntries">Add Entries</button>
            </div>
        </div>
    </div>
    }
</div>

