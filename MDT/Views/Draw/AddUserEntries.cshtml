@using MDT.ViewModels
@model EntryVM

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal">&times;</button>
    <h2>Add User Entries</h2>
</div>
@using (Ajax.BeginForm("AddUserEntries", "Draw", new AjaxOptions() { HttpMethod = "Post", UpdateTargetId = "modaldiv", OnSuccess = "hideModalSpinner", OnFailure = "showModalError" }, htmlAttributes: new { id = "ModalForm" }))
{
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.DrawId)
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.UserId, htmlAttributes: new { @class = "control-label col-xs-4" })
                <div class="col-xs-8">
                    @Html.DropDownListFor(model => model.UserId, new SelectList(ViewBag.Users, "val", "txt"), "Select a User", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.EntryCount, htmlAttributes: new { @class = "control-label col-xs-4" })
                <div class="col-xs-8">
                    @Html.EditorFor(model => model.EntryCount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EntryCount, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <div class="form-group">
            <div class="col-xs-8 pull-right">
                <button type="submit" class="btn btn-success">Add Entries</button>
            </div>
        </div>
    </div>
}

