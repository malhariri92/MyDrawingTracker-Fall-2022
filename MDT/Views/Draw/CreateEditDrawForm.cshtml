@using MDT.ViewModels
@using MDT.Models.DTO
@using System.Web.Mvc

<style>
    li {
        list-style-type: none;
    }
    #createEditForm {
        display: none;
    }
</style>
@model UIDrawInnerDTO
@{
    bool isPast = (bool)Session["past"];
    List<SelectListItem> select = new List<SelectListItem>();

    foreach (DrawTypeDTO dT in Model.drawTypeDTOs)
    {
        select.Add(new SelectListItem { Text = dT.DrawTypeName, Value = dT.DrawTypeId.ToString() });
    }
}
@if (isPast)
{
    <div>
        <p class="text-danger">The drawing cannot end in the past!</p>
    </div>
}

@if (Model.drawTypeDTOs.Count == 0)
{
    <div>
        <p class="text-danger">There are no draw types defined for this group.</p>
        <br />
    </div>
}
else
{
    <h2>
        @(Model.toCreate ? "Create a New Draw" : "Edit an Existing Draw")
    </h2>
    <br />
    using (Ajax.BeginForm(Model.toCreate ? "CreateNewDraw" : "EditExistingDraw",
            "Draw",
            new AjaxOptions { HttpMethod = "Post", UpdateTargetId = "createEditForm" }))
    {
        @Html.AntiForgeryToken()
        <div class="form-hotizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.drawVm.DrawTypeId, new { htmlAttributes = new { @class = "control-label col-xs-4" } })
                <div class="col-xs-8">
                    @Html.DropDownListFor(model => model.drawVm.DrawTypeId,
                 select,
                 new { htmlAttributes = new { @Value = Model.drawVm.DrawTypeId != 0 ? Model.drawVm.DrawTypeId : Model.drawTypeDTOs.FirstOrDefault().DrawTypeId, @class = "form-control" } })
                </div>
                <div class="col-xs-12">
                    <ul>
                        <li id="entryCost">

                        </li>
                        <li id="entriesToDraw">

                        </li>
                        <li id="maxEntries">

                        </li>
                        <li id="removeDrawnEntries">

                        </li>
                        <li id="removeDrawnUsers">

                        </li>
                        <li id="numOfDraws">

                        </li>
                        <li id="passDrawn">

                        </li>
                        <li id="passUndrawn">

                        </li>
                        <li id="autoDraw">

                        </li>
                        <li id="joinConfirm">

                        </li>
                        <li id="refundConfirm">

                        </li>
                        <li id="initialBalance">

                        </li>
                    </ul>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.drawVm.EndDate, new { htmlAttributes = new { @class = "control-label col-xs-4" } })
                <div class="col-xs-8">
                    @Html.EditorFor(
                     model => model.drawVm.EndDate,
                     new
                     {
                         htmlAttributes = new { @Value = Model.drawVm.EndDate.ToString("MM/dd/yyyy"), @class = "form-control", autocomplete = "off" }
                     })
                    @Html.ValidationMessageFor(model => model.drawVm.EndDate, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.drawVm.DrawId)
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-8 pull-right">
                    <button type="submit" class="btn btn-sm btn-info" id="btnCreateEditDrawing">@(Model.toCreate ? "Create New Drawing" : "Edit Drawing")</button>
                </div>
            </div>
        </div>
    }

    <script type="text/javascript">
    var draw = {};

    @foreach (DrawTypeDTO i in Model.drawTypeDTOs)
    {
        @:draw['@i.DrawTypeId'] = {
            @:ID: '@i.DrawTypeId',
            @:entryCost: '@i.EntryCost.ToString()',
            @:entriesToDraw: '@i.EntriesToDraw.ToString()',
            @:maxEntriesPerUser: '@i.MaxEntriesPerUser',
            @:removeDrawnEntries: '@i.RemoveDrawnEntries.ToString()',
            @:removeDrawnUsers: '@i.RemoveDrawnUsers.ToString()',
            @:numberOfDraws: '@i.NumberOfDraws.ToString()',
            @:passDrawnToNext: '@i.PassDrawnToNext.ToString()',
            @:passUndrawnToNext: '@i.PassUndrawnToNext.ToString()',
            @:autoDraw: '@i.AutoDraw.ToString()',
            @:joinConfirmReq: '@i.JoinConfirmationRequired.ToString()',
            @:refundConfirmReq: '@i.RefundConfirmationRequired.ToString()',
            @:initialUserBalance: '@i.InitialUserBalance.ToString()',
        @:};
    };

    function updateDetails(id) {
        $("#entryCost").html(function () {
            return "Entry Cost: $" + draw[id].entryCost;
        });
        $("#entriesToDraw").html(function () {
            return "Entries to Draw: " + draw[id].entriesToDraw;
        });
        $("#maxEntries").html(function () {
            return "Maximum Entries Per Person: " + draw[id].maxEntriesPerUser;
        });
        $("#removeDrawnEntries").html(function () {
            return "Will Remove Drawn Entries: " + draw[id].removeDrawnEntries;
        });
        $("#removeDrawnUsers").html(function () {
            return "Will Remove Drawn Users: " + draw[id].removeDrawnUsers;
        });
        $("#numOfDraws").html(function () {
            return "Number of Draws: " + draw[id].numberOfDraws;
        });
        $("#passDrawn").html(function () {
            return "Will Pass Drawn Entries to Next: " + draw[id].passDrawnToNext;
        });
        $("#passUndrawn").html(function () {
            return "Will Pass Undrawn Entries to Next: " + draw[id].passUndrawnToNext;
        });
        $("#autoDraw").html(function () {
            return "Will Auto-Draw: " + draw[id].autoDraw;
        });
        $("#joinConfirm").html(function () {
            return "Requires Join Confirmation: " + draw[id].joinConfirmReq;
        });
        $("#refundConfirm").html(function () {
            return "Requires Refund Confirmation: " + draw[id].refundConfirmReq;
        });
        $("#initialBalance").html(function () {
            return "Inital Balance: $" + draw[id].initialUserBalance;
        });
    }

    $(document).ready(function () {
        updateDetails($("#drawVm_DrawTypeId").val());
        $("#drawVm_DrawTypeId").change(function () {
            var id = $(this).val();
            updateDetails(id);
        });
    });
    </script>
}

