@model MDT.ViewModels.DrawTypeVM

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal">&times;</button>
    <h2>@(Model.DrawTypeId == 0 ? "Create New Draw Type" : $"Edit {Model.TypeName}")</h2>
</div>

@using (Ajax.BeginForm("EditDrawType", "Draw", null, new AjaxOptions() { HttpMethod="Post", OnSuccess="hideModal", UpdateTargetId= "divRules", OnFailure="showModalError" }))
{
    <div class="modal-body">
        <div class="form-horizontal">
            @Html.AntiForgeryToken()

            @if (Model.DrawTypeId > 0)
            {
                @Html.HiddenFor(model => model.DrawTypeId)
            }
            else
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.TypeName, htmlAttributes: new { @class = "col-xs-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.TypeName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TypeName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.IsInternal, htmlAttributes: new { @class = "col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.IsInternal, new { htmlAttributes = new { @class = "switch" } })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.InitialUserBalance, htmlAttributes: new { @class = "col-xs-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.InitialUserBalance, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.InitialUserBalance, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.LabelFor(model => model.EntryCost, htmlAttributes: new { @class = "col-xs-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.EntryCost, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EntryCost, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MaxEntriesPerUser, htmlAttributes: new { @class = "col-xs-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.MaxEntriesPerUser, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MaxEntriesPerUser, "", new { @class = "text-danger" })
                </div>
            </div>
            <div id="internaloptions" style="@(Model.IsInternal ? "" : "display:none")">
                <div class="form-group">
                    @Html.LabelFor(model => model.EntriesToDraw, htmlAttributes: new { @class = "col-xs-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.EntriesToDraw, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EntriesToDraw, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row" id="multidraw" style="@(Model.EntriesToDraw <= 1 ? "display:none" : "")">
                    <div class="form-group">
                        @Html.LabelFor(model => model.RemoveDrawnEntries, htmlAttributes: new { @class = "col-xs-4" })
                        <div class="col-xs-8">
                            @Html.EditorFor(model => model.RemoveDrawnEntries, new { htmlAttributes = new { @class = "switch other", data_other_toggle = "RemoveDrawnUsers" } })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.RemoveDrawnUsers, htmlAttributes: new { @class = "col-xs-4" })
                        <div class="col-xs-8">
                            @Html.EditorFor(model => model.RemoveDrawnUsers, new { htmlAttributes = new { @class = "switch other", data_other_toggle = "RemoveDrawnEntries" } })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NumberOfDraws, htmlAttributes: new { @class = "col-xs-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.NumberOfDraws, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NumberOfDraws, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="row" id="series" style="@(Model.NumberOfDraws == 1 ? "display:none" : "")">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PassDrawnToNext, htmlAttributes: new { @class = "col-xs-4" })
                        <div class="col-xs-8">
                            @Html.EditorFor(model => model.PassDrawnToNext, new { htmlAttributes = new { @class = "switch other", data_other_toggle = "PassUndrawnToNext" } })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PassUndrawnToNext, htmlAttributes: new { @class = "col-xs-4" })
                        <div class="col-xs-8">
                            @Html.EditorFor(model => model.PassUndrawnToNext, new { htmlAttributes = new { @class = "switch other", data_other_toggle = "PassDrawnToNext" } })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.AutoDraw, htmlAttributes: new { @class = "col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.AutoDraw, new { htmlAttributes = new { @class = "switch" } })
                    </div>
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.JoinConfirmationRequired, htmlAttributes: new { @class = "col-xs-4" })
                <div class="col-xs-8">
                    @Html.EditorFor(model => model.JoinConfirmationRequired, new { htmlAttributes = new { @class = "switch" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RefundConfirmationRequired, htmlAttributes: new { @class = "col-xs-4" })
                <div class="col-xs-8">
                    @Html.EditorFor(model => model.RefundConfirmationRequired, new { htmlAttributes = new { @class = "switch" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsolateBalance, htmlAttributes: new { @class = "col-xs-4" })
                <div class="col-xs-8">
                    @Html.EditorFor(model => model.IsolateBalance, new { htmlAttributes = new { @class = "switch" } })
                </div>
            </div>

            <div id="allocate" style="@(Model.IsolateBalance ? "display:none" : "")">
                <div class="form-group">
                    @Html.LabelFor(model => model.AllowAllocation, htmlAttributes: new { @class = "col-xs-4" })
                    <div class="col-xs-8">
                        @Html.EditorFor(model => model.AllowAllocation, new { htmlAttributes = new { @class = "switch" } })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasSchedule, htmlAttributes: new { @class = "col-xs-4" })
                <div class="col-xs-8`">
                    @Html.EditorFor(model => model.HasSchedule, new { htmlAttributes = new { @class = "switch" } })
                </div>
            </div>
            <div class="form-group row text-center" id="schedule" style="@(Model.HasSchedule ? "" : "display:none;")">
                <div class="col-xs-12">
                    <table class="table table-bordered table-responsive">
                        <caption>Set Schedule</caption>
                        <thead>
                            <tr>
                                @for (int i = 0; i < 7; i++)
                                {
                                    <th class="text-center">@Html.LabelFor(modelItem => Model.Schedule.Days[i].DrawTime, Model.Schedule.Days[i].Abbr, new { })</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @for (int i = 0; i < 7; i++)
                                {
                                    <td class="text-center">@Html.EditorFor(modelItem => Model.Schedule.Days[i].DrawTime, new { htmlAttributes = new { style = "max-width:50px;text-align:center;" } })</td>
                                }
                            </tr>

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <div class="col-md-offset-1 col-md-10">
            <button type="button" class="btn btn-sm btn-danger" data-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-sm btn-success">@(Model.DrawTypeId > 0 ? "Save Changes" : "Create")</button>
        </div>
    </div>
}


<script type="text/javascript">
    $(function () {
        $('.switch').each(function () {
            $(this).attr('data-toggle', 'toggle')
                .attr('data-on', 'Yes')
                .attr('data-off', 'No')
                .attr('data-onstyle', 'success');

            $(this).bootstrapToggle();
        });

        for (let i = 0; i < 7; i++) {
            $(`#Schedule_Days_${i}__DrawTime`).timepicker();
        }

        $.validator.unobtrusive.parse('#form0');
    });

    $(document).on('change', '#NumberOfDraws', function () {
        let val = +$(this).val();
        if (val > 1) {
            $('#series').show();
        } else {
            $('#series').hide();
        }

    });


    $(document).on('change', '#EntriesToDraw', function () {
        let val = +$(this).val();
        if (val > 1) {
            $('#multidraw').show();
        } else {
            $('#multidraw').hide();
        }
    });

    $(document).on('change', '#HasSchedule', function () {
        let val = $(this).is(':checked');
        if (val) {
            $('#schedule').show();
        } else {
            $('#schedule').hide();
        }

    });

    $(document).on('change', '#IsolateBalance', function () {
        let val = $(this).is(':checked');
        if (val) {
            $('#allocate').hide();
        } else {
            $('#allocate').show();
        }

    });

    $(document).on('change', '#IsInternal', function () {
        let val = $(this).is(':checked');
        if (val) {
            $('#internaloptions').show();
        } else {
            $('#internaloptions').hide();
        }

    });
    $(document).on('change', '.other', function () {
        let otherid = $(this).attr('data-other-toggle');
        if ($(this).is(':checked')) {
            $(`#${otherid}`).bootstrapToggle('off');
        }

    });

</script>

