@model MDT.ViewModels.DrawTypeVM
@{
    bool create = Model.DrawTypeId == 0;
    AjaxOptions options = new AjaxOptions()
    {
        HttpMethod = "Post",
        OnFailure = "showModalError"
    };

    if (create)
    {
        options.OnSuccess = "redirectPage";
    }
    else
    {
        options.OnSuccess = "hideModal";
        options.UpdateTargetId = "divRules";
    }
}
<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal">&times;</button>
    @if (create)
    {
        <h2>Create a new Draw Type</h2>
    }
    else
    {
        <h2>Edit @Model.TypeName</h2>
    }
</div>

@using (Ajax.BeginForm("EditDrawType", "Draw", null, options, htmlAttributes: new { id = "ModalForm" }))
{
    <div class="modal-body" style="max-height: 500px; overflow-y: auto">
        <div class="form-horizontal">
            @Html.AntiForgeryToken()

            @if (create)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.TypeName, htmlAttributes: new { @class = "col-xs-5" })
                    <div class="col-xs-7">
                        @Html.EditorFor(model => model.TypeName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TypeName, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group">
                    @Html.LabelFor(model => model.InitialUserBalance, htmlAttributes: new { @class = "col-xs-5" })
                    <div class="col-xs-7">
                        @Html.EditorFor(model => model.InitialUserBalance, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.InitialUserBalance, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IsInternal, htmlAttributes: new { @class = "col-xs-5" })
                    <div class="col-xs-7">
                        @Html.EditorFor(model => model.IsInternal, new { htmlAttributes = new { @class = "switch boolToggleRev", data_panel_selector = "#internaloptions" } })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.DrawTypeId)
            }

            <div class="form-group">
                @Html.LabelFor(model => model.EntryCost, htmlAttributes: new { @class = "col-xs-5" })
                <div class="col-xs-7">
                    @Html.EditorFor(model => model.EntryCost, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EntryCost, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MaxEntriesPerUser, htmlAttributes: new { @class = "col-xs-5" })
                <div class="col-xs-7">
                    @Html.EditorFor(model => model.MaxEntriesPerUser, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MaxEntriesPerUser, "", new { @class = "text-danger" })
                </div>
            </div>
            @if (Model.IsInternal || create)
            {
                <div id="internaloptions" style="@(Model.IsInternal ? "" : "display:none")">
                    <div class="form-group">
                        @Html.LabelFor(model => model.EntriesToDraw, htmlAttributes: new { @class = "col-xs-5" })
                        <div class="col-xs-7">
                            @Html.EditorFor(model => model.EntriesToDraw, new { htmlAttributes = new { @class = "form-control intToggle", data_cutoff = "1", data_panel_selector = ".multidraw" } })
                            @Html.ValidationMessageFor(model => model.EntriesToDraw, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group multidraw" style="@(Model.EntriesToDraw <= 1 ? "display:none" : "")">
                        @Html.LabelFor(model => model.RemoveDrawnEntries, htmlAttributes: new { @class = "col-xs-5" })
                        <div class="col-xs-7">
                            @Html.EditorFor(model => model.RemoveDrawnEntries, new { htmlAttributes = new { @class = "switch other", data_other_toggle = "RemoveDrawnUsers" } })
                        </div>
                    </div>

                    <div class="form-group multidraw" style="@(Model.EntriesToDraw <= 1 ? "display:none" : "")">
                        @Html.LabelFor(model => model.RemoveDrawnUsers, htmlAttributes: new { @class = "col-xs-5" })
                        <div class="col-xs-7">
                            @Html.EditorFor(model => model.RemoveDrawnUsers, new { htmlAttributes = new { @class = "switch other", data_other_toggle = "RemoveDrawnEntries" } })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.NumberOfDraws, htmlAttributes: new { @class = "col-xs-5" })
                        <div class="col-xs-7">
                            @Html.EditorFor(model => model.NumberOfDraws, new { htmlAttributes = new { @class = "form-control intToggle", data_cutoff = "1", data_panel_selector = ".series" } })
                            @Html.ValidationMessageFor(model => model.NumberOfDraws, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group series" style="@(Model.NumberOfDraws == 1 ? "display:none" : "")">
                        @Html.LabelFor(model => model.PassDrawnToNext, htmlAttributes: new { @class = "col-xs-5" })
                        <div class="col-xs-7">
                            @Html.EditorFor(model => model.PassDrawnToNext, new { htmlAttributes = new { data_toggle="toggle", data_on="Drawn", data_off="Undrawn", data_onstyle="success", data_width="100px" } })
                        </div>
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.LabelFor(model => model.JoinConfirmationRequired, htmlAttributes: new { @class = "col-xs-5" })
                <div class="col-xs-7">
                    @Html.EditorFor(model => model.JoinConfirmationRequired, new { htmlAttributes = new { @class = "switch" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RefundConfirmationRequired, htmlAttributes: new { @class = "col-xs-5" })
                <div class="col-xs-7">
                    @Html.EditorFor(model => model.RefundConfirmationRequired, new { htmlAttributes = new { @class = "switch" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsolateBalance, htmlAttributes: new { @class = "col-xs-5" })
                <div class="col-xs-7">
                    @Html.EditorFor(model => model.IsolateBalance, new { htmlAttributes = new { @class = "switch boolToggle", data_panel_selector = ".allocate" } })
                </div>
            </div>

            <div class="form-group allocate" style="@(Model.IsolateBalance ? "display:none" : "")">
                @Html.LabelFor(model => model.AllowAllocation, htmlAttributes: new { @class = "col-xs-5" })
                <div class="col-xs-7">
                    @Html.EditorFor(model => model.AllowAllocation, new { htmlAttributes = new { @class = "switch" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HasSchedule, htmlAttributes: new { @class = "col-xs-5" })
                <div class="col-xs-7">
                    @Html.EditorFor(model => model.HasSchedule, new { htmlAttributes = new { @class = "switch boolToggleRev", data_panel_selector = "#schedule" } })
                </div>
            </div>
            <div class="form-group row text-center" id="schedule" style="@(Model.HasSchedule ? "" : "display:none;")">
                <div class="col-xs-12">
                    <table class="table table-bordered table-responsive">
                        <caption>Set Schedule</caption>
                        <thead>
                            <tr>
                                @for (int i = 0; i < 7; i++)
                                {
                                    <th class="text-center">@Html.LabelFor(modelItem => Model.Schedule.Days[i].DrawTime, Model.Schedule.Days[i].Abbr, new { })</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @for (int i = 0; i < 7; i++)
                                {
                                    <td class="text-center">@Html.EditorFor(modelItem => Model.Schedule.Days[i].DrawTime, new { htmlAttributes = new { @class = "tp", style = "max-width:50px;text-align:center;" } })</td>
                                }
                            </tr>

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <div class="col-md-offset-1 col-md-10">
            <button type="button" class="btn btn-sm btn-danger" data-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-sm btn-success">@(Model.DrawTypeId > 0 ? "Save Changes" : "Create")</button>
        </div>
    </div>
}


<script type="text/javascript">
    $(function () {
        $('.switch').each(function () {
            $(this).attr('data-toggle', 'toggle')
                .attr('data-on', 'Yes')
                .attr('data-off', 'No')
                .attr('data-onstyle', 'success');

            $(this).bootstrapToggle();
        });

        $('#PassDrawnToNext').bootstrapToggle();
        $(`.tp`).timepicker();

    });

    $('.intToggle').on('change', function () {
        let val = +$(this).val();
        let cutoff = +$(this).attr('data-cutoff');
        let selector = $(this).attr('data-panel-selector');
        if (val > cutoff) {
            $(selector).show();
        } else {
            $(selector).hide();
        }
    });

    $('.boolToggle').on('change', function () {
        let selector = $(this).attr('data-panel-selector');
        if ($(this).is(':checked')) {
            $(selector).hide();
        } else {
            $(selector).show();
        }
    });

    $('.boolToggleRev').on('change', function () {
        let selector = $(this).attr('data-panel-selector');
        if ($(this).is(':checked')) {
            $(selector).show();
        } else {
            $(selector).hide();
        }
    });

    $('.other').on('change', function () {
        let otherid = $(this).attr('data-other-toggle');
        if ($(this).is(':checked')) {
            $(`#${otherid}`).bootstrapToggle('off');
        }
    });

</script>

